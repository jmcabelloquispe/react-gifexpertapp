{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","console","log","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAC,OAAKP,GAAL,mBAAoBO,OACnCN,EAAc,MAMhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAlBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCTdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACrBC,QAAQC,IAAIH,GACNI,EAFe,iDAEiCC,UAAUL,GAF3C,+DAGFM,MAAMF,GAHJ,cAGfG,EAHe,gBAIAA,EAAKC,OAJL,uBAIdC,EAJc,EAIdA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVjB,kBAadM,GAbc,4CAAH,sDCGPO,EAAc,SAAC,GAAkB,IAAjBb,EAAgB,EAAhBA,IAAKU,EAAW,EAAXA,MAChC,OACE,sBAAKI,UAAU,6CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAEvB,ECJ0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCuB,KAAK,GACLa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAqBA,OAhBAC,qBAAU,WACR1B,EAASC,GACN0B,MAAK,SAAAC,GACJH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGd,CAAEtB,IAQEuB,EDlBwBK,CAAa5B,GAAhCe,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAEpB,OACE,qCACA,6BAAKtB,IACJsB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAAAkB,GAAK,OACf,cAAC,EAAD,eAEMA,GADCA,EAAMhB,aEZRiB,EAAe,WAE1B,MAAoC5C,mBAAS,CAAC,cAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAMA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI8C,EAAWpB,KAAI,SAACX,EAAUgC,GAAX,OACb,cAAC,EAAD,CAEEhC,SAAUA,GADLA,Y,YChBnBiC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0137837e.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({setCategories}) => {\n\n  const [inputValue, setInputValue] = useState('')\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if(inputValue.trim().length > 2){\n      setCategories(c => [inputValue, ...c]);\n      setInputValue('');\n    }\n    \n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input \n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}","export const getGifs = async (category) => {\n  console.log(category);\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=yiZN8zZVNSI4ce7SDvdtyAQNBXw0lMWe`\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n\n  const gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  return gifs;\n}","import React from 'react'\n\n\nexport const GifGridItem = ({url, title}) => {\n  return (\n    <div className=\"card animate__animated animate__rubberBand\">\n      <img src={url} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { getGifs } from '../helpers/getGifs'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem'\n\nexport const GifGrid = ({category}) => {\n  \n  const {data:images, loading} = useFetchGifs(category);\n\n  return (\n    <>\n    <h3>{category}</h3>\n    {loading && <p>loading</p>}\n    <div className=\"card-grid\">\n      {images.map(image => (\n        <GifGridItem \n          key={image.id} \n          {...image}\n        />\n      ))}\n    </div>\n    </>\n  )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data:[],\n    loading: true\n  });\n\n  useEffect(()=> {\n    getGifs( category )\n      .then(imgs => {\n        setState({\n          data: imgs,\n          loading: false\n        });\n      })\n  }, [ category ])\n\n  // setTimeout(()=> {\n  //   setstate({\n  //     data: [1],\n  //     loading: false\n  //   })\n  // }, 4000)\n  return state;\n}","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n  // const categories = ['one punch', 'samuari', 'pokemon'];\n  const [categories, setCategories] = useState(['one punch'])\n\n  // const handleAdd = (e) => {\n  //   setCategories([...categories, 'mija']);\n  // }\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories}/> \n      <hr />\n      {/* <button onClick={handleAdd}>agregar</button> */}\n      <ol>\n        {\n          categories.map((category, i) => \n            <GifGrid \n              key={category} \n              category={category}\n            />)\n        }\n      </ol>\n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\nimport 'animate.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}